.SYNTAX PROGRAM

PROGRAM = ASSIGNMENT $(ASSIGNMENT | FUNCTION);

ASSIGNMENT = (TYPED_DECLARATION | UNTYPED_DECLARATION) $ "=" EXP -> ("STO") ";";

FUNCTION = "func" $ .ID .LABEL "(" ARGUMENT_LIST ")";

ARGUMENT_LIST = ARGUMENT $ "," $ ARGUMENT_LIST;

ARGUMENT = TYPE -> ("CVT" #1) $ .ID -> ("PUSH" *);

TYPE = /(\w+)/;

[ Expression ]

EXP = EX2 $("+" EX2 -> ("ADD")
	| "-" EX2 -> ("SUB") );
EX2 = EX3 $("*" EX3 -> ("MUL")
	| "/" EX3 -> ("DIV") );
EX3 = EX4 $("**" EX3 -> ("POW"));
EX4 = "+" EX5
	| "-" EX5 -> ("NEG")
	| EX5;
EX5 = .ID  -> ("LDN" *)
	| .NUMBER -> ("LDC" *)
	| "(" EX1 ")";

[ Type ]
[ A type can be just a single word like `string` ]
[ but it might also be something like an array of string, a fixed-length array ]
[ or something entirely else, this defines all edge cases ]

TYPED_DECLARATION = /(.*)\s*:/ -> ("CVT" #1) $ ":" $ .ID -> ("ADR" *);

UNTYPED_DECLARATION = .ID -> ("CVT" "~") -> ("ADR" *);

.END